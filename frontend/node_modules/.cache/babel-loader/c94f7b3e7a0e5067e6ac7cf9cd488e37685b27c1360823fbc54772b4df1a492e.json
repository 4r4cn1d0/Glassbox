{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aayus\\\\Glassbox\\\\frontend\\\\src\\\\AttentionSpiderWeb.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport { Paper, Typography } from '@mui/material';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AttentionSpiderWeb = ({\n  attention,\n  tokens,\n  selectedLayer,\n  selectedHead\n}) => {\n  _s();\n  const svgRef = useRef(null);\n  useEffect(() => {\n    if (!svgRef.current || !attention.length || !tokens.length) return;\n\n    // Clear previous render\n    const svg = d3.select(svgRef.current);\n    svg.selectAll(\"*\").remove();\n    const width = 800;\n    const height = 600;\n    const centerX = width / 2;\n    const centerY = height / 2;\n    const radius = Math.min(width, height) / 2 - 80;\n\n    // Safely extract attention data with runtime validation\n    let attentionData = [];\n    try {\n      if (attention[selectedLayer] && attention[selectedLayer][selectedHead]) {\n        const rawData = attention[selectedLayer][selectedHead];\n\n        // Check if it's already a 2D array\n        if (Array.isArray(rawData) && rawData.length > 0) {\n          if (Array.isArray(rawData[0])) {\n            // It's already 2D\n            attentionData = rawData;\n          } else {\n            // It might be 1D, try to reshape or handle differently\n            console.warn('Attention data appears to be 1D, skipping visualization');\n            return;\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error processing attention data:', error);\n      return;\n    }\n    if (attentionData.length === 0) return;\n\n    // Position tokens in a circle\n    const tokenPositions = tokens.map((token, i) => {\n      const angle = 2 * Math.PI * i / tokens.length - Math.PI / 2;\n      return {\n        x: centerX + radius * Math.cos(angle),\n        y: centerY + radius * Math.sin(angle),\n        token: token,\n        index: i\n      };\n    });\n\n    // Create container group\n    const g = svg.append('g');\n\n    // Find maximum attention value for scaling\n    let maxAttention = 0;\n    for (let i = 0; i < attentionData.length; i++) {\n      const row = attentionData[i];\n      if (Array.isArray(row)) {\n        for (let j = 0; j < row.length; j++) {\n          const val = row[j];\n          if (typeof val === 'number' && !isNaN(val) && val > maxAttention) {\n            maxAttention = val;\n          }\n        }\n      }\n    }\n    if (maxAttention === 0) return;\n    const minThreshold = maxAttention * 0.05; // Only show connections above 5% of max\n\n    // Draw attention connections\n    for (let fromIdx = 0; fromIdx < attentionData.length && fromIdx < tokenPositions.length; fromIdx++) {\n      const fromAttentions = attentionData[fromIdx];\n      if (!Array.isArray(fromAttentions)) continue;\n      for (let toIdx = 0; toIdx < fromAttentions.length && toIdx < tokenPositions.length; toIdx++) {\n        const attentionWeight = fromAttentions[toIdx];\n        if (typeof attentionWeight !== 'number' || isNaN(attentionWeight)) continue;\n        if (attentionWeight <= minThreshold) continue;\n        const from = tokenPositions[fromIdx];\n        const to = tokenPositions[toIdx];\n        const opacity = Math.min(1, attentionWeight / maxAttention);\n        const strokeWidth = Math.max(1, opacity * 8);\n        g.append('line').attr('x1', from.x).attr('y1', from.y).attr('x2', to.x).attr('y2', to.y).attr('stroke', `rgba(33, 150, 243, ${opacity})`).attr('stroke-width', strokeWidth).attr('class', 'attention-connection').style('pointer-events', 'none');\n      }\n    }\n\n    // Draw token nodes\n    const nodes = g.selectAll('.token-node').data(tokenPositions).enter().append('g').attr('class', 'token-node').attr('transform', d => `translate(${d.x}, ${d.y})`);\n\n    // Add circles for tokens\n    nodes.append('circle').attr('r', 20).attr('fill', '#2196F3').attr('stroke', '#fff').attr('stroke-width', 2).style('cursor', 'pointer');\n\n    // Add token text\n    nodes.append('text').text(d => d.token.length > 6 ? d.token.substring(0, 6) + '...' : d.token).attr('text-anchor', 'middle').attr('dy', '0.3em').attr('fill', '#fff').attr('font-size', '10px').attr('font-weight', 'bold').style('pointer-events', 'none');\n\n    // Add hover effects\n    nodes.on('mouseover', function (event, d) {\n      d3.select(this).select('circle').transition().duration(200).attr('r', 25).attr('fill', '#21CBF3');\n\n      // Show tooltip\n      d3.select('body').append('div').attr('class', 'spider-tooltip').style('position', 'absolute').style('background', 'rgba(0, 0, 0, 0.8)').style('color', '#fff').style('padding', '8px').style('border-radius', '4px').style('font-size', '12px').style('pointer-events', 'none').style('z-index', '1000').style('left', event.pageX + 10 + 'px').style('top', event.pageY - 10 + 'px').text(`Token: \"${d.token}\" (Position: ${d.index})`);\n    }).on('mouseout', function () {\n      d3.select(this).select('circle').transition().duration(200).attr('r', 20).attr('fill', '#2196F3');\n      d3.selectAll('.spider-tooltip').remove();\n    });\n\n    // Add center label\n    g.append('text').attr('x', centerX).attr('y', centerY - 10).attr('text-anchor', 'middle').attr('fill', '#aaa').attr('font-size', '14px').text(`Layer ${selectedLayer + 1}, Head ${selectedHead + 1}`);\n    g.append('text').attr('x', centerX).attr('y', centerY + 10).attr('text-anchor', 'middle').attr('fill', '#aaa').attr('font-size', '12px').text('Attention Flow Network');\n  }, [attention, tokens, selectedLayer, selectedHead]);\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    elevation: 2,\n    sx: {\n      p: 2,\n      mb: 3,\n      bgcolor: '#1e1e1e',\n      border: '1px solid #333'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      sx: {\n        mb: 2,\n        color: '#fff'\n      },\n      children: \"Attention Spider Web\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body2\",\n      sx: {\n        mb: 2,\n        color: '#aaa'\n      },\n      children: \"Network visualization showing attention connections between tokens. Line thickness and opacity represent attention strength.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      width: \"100%\",\n      height: \"600\",\n      viewBox: \"0 0 800 600\",\n      style: {\n        background: '#0a0a0a',\n        borderRadius: '4px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 5\n  }, this);\n};\n_s(AttentionSpiderWeb, \"89Ty783ABEwsfMbSOeu9vscWF34=\");\n_c = AttentionSpiderWeb;\nexport default AttentionSpiderWeb;\nvar _c;\n$RefreshReg$(_c, \"AttentionSpiderWeb\");","map":{"version":3,"names":["React","useRef","useEffect","Paper","Typography","d3","jsxDEV","_jsxDEV","AttentionSpiderWeb","attention","tokens","selectedLayer","selectedHead","_s","svgRef","current","length","svg","select","selectAll","remove","width","height","centerX","centerY","radius","Math","min","attentionData","rawData","Array","isArray","console","warn","error","tokenPositions","map","token","i","angle","PI","x","cos","y","sin","index","g","append","maxAttention","row","j","val","isNaN","minThreshold","fromIdx","fromAttentions","toIdx","attentionWeight","from","to","opacity","strokeWidth","max","attr","style","nodes","data","enter","d","text","substring","on","event","transition","duration","pageX","pageY","elevation","sx","p","mb","bgcolor","border","children","variant","color","fileName","_jsxFileName","lineNumber","columnNumber","ref","viewBox","background","borderRadius","_c","$RefreshReg$"],"sources":["C:/Users/aayus/Glassbox/frontend/src/AttentionSpiderWeb.tsx"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\nimport { Paper, Typography } from '@mui/material';\r\nimport * as d3 from 'd3';\r\n\r\ninterface AttentionSpiderWebProps {\r\n  attention: number[][][]; // [layer][head][from_token][to_token]\r\n  tokens: string[];\r\n  selectedLayer: number;\r\n  selectedHead: number;\r\n}\r\n\r\ninterface TokenPosition {\r\n  x: number;\r\n  y: number;\r\n  token: string;\r\n  index: number;\r\n}\r\n\r\nconst AttentionSpiderWeb: React.FC<AttentionSpiderWebProps> = ({\r\n  attention,\r\n  tokens,\r\n  selectedLayer,\r\n  selectedHead\r\n}) => {\r\n  const svgRef = useRef<SVGSVGElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (!svgRef.current || !attention.length || !tokens.length) return;\r\n\r\n    // Clear previous render\r\n    const svg = d3.select(svgRef.current);\r\n    svg.selectAll(\"*\").remove();\r\n\r\n    const width = 800;\r\n    const height = 600;\r\n    const centerX = width / 2;\r\n    const centerY = height / 2;\r\n    const radius = Math.min(width, height) / 2 - 80;\r\n\r\n    // Safely extract attention data with runtime validation\r\n    let attentionData: number[][] = [];\r\n    \r\n    try {\r\n      if (attention[selectedLayer] && attention[selectedLayer][selectedHead]) {\r\n        const rawData = attention[selectedLayer][selectedHead];\r\n        \r\n        // Check if it's already a 2D array\r\n        if (Array.isArray(rawData) && rawData.length > 0) {\r\n          if (Array.isArray(rawData[0])) {\r\n            // It's already 2D\r\n            attentionData = rawData;\r\n          } else {\r\n            // It might be 1D, try to reshape or handle differently\r\n            console.warn('Attention data appears to be 1D, skipping visualization');\r\n            return;\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error processing attention data:', error);\r\n      return;\r\n    }\r\n\r\n    if (attentionData.length === 0) return;\r\n\r\n    // Position tokens in a circle\r\n    const tokenPositions: TokenPosition[] = tokens.map((token, i) => {\r\n      const angle = (2 * Math.PI * i) / tokens.length - Math.PI / 2;\r\n      return {\r\n        x: centerX + radius * Math.cos(angle),\r\n        y: centerY + radius * Math.sin(angle),\r\n        token: token,\r\n        index: i\r\n      };\r\n    });\r\n\r\n    // Create container group\r\n    const g = svg.append('g');\r\n\r\n    // Find maximum attention value for scaling\r\n    let maxAttention = 0;\r\n    for (let i = 0; i < attentionData.length; i++) {\r\n      const row = attentionData[i];\r\n      if (Array.isArray(row)) {\r\n        for (let j = 0; j < row.length; j++) {\r\n          const val = row[j];\r\n          if (typeof val === 'number' && !isNaN(val) && val > maxAttention) {\r\n            maxAttention = val;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (maxAttention === 0) return;\r\n\r\n    const minThreshold = maxAttention * 0.05; // Only show connections above 5% of max\r\n\r\n    // Draw attention connections\r\n    for (let fromIdx = 0; fromIdx < attentionData.length && fromIdx < tokenPositions.length; fromIdx++) {\r\n      const fromAttentions = attentionData[fromIdx];\r\n      if (!Array.isArray(fromAttentions)) continue;\r\n      \r\n      for (let toIdx = 0; toIdx < fromAttentions.length && toIdx < tokenPositions.length; toIdx++) {\r\n        const attentionWeight = fromAttentions[toIdx];\r\n        \r\n        if (typeof attentionWeight !== 'number' || isNaN(attentionWeight)) continue;\r\n        if (attentionWeight <= minThreshold) continue;\r\n\r\n        const from = tokenPositions[fromIdx];\r\n        const to = tokenPositions[toIdx];\r\n        const opacity = Math.min(1, attentionWeight / maxAttention);\r\n        const strokeWidth = Math.max(1, opacity * 8);\r\n\r\n        g.append('line')\r\n          .attr('x1', from.x)\r\n          .attr('y1', from.y)\r\n          .attr('x2', to.x)\r\n          .attr('y2', to.y)\r\n          .attr('stroke', `rgba(33, 150, 243, ${opacity})`)\r\n          .attr('stroke-width', strokeWidth)\r\n          .attr('class', 'attention-connection')\r\n          .style('pointer-events', 'none');\r\n      }\r\n    }\r\n\r\n    // Draw token nodes\r\n    const nodes = g.selectAll('.token-node')\r\n      .data(tokenPositions)\r\n      .enter()\r\n      .append('g')\r\n      .attr('class', 'token-node')\r\n      .attr('transform', (d: TokenPosition) => `translate(${d.x}, ${d.y})`);\r\n\r\n    // Add circles for tokens\r\n    nodes.append('circle')\r\n      .attr('r', 20)\r\n      .attr('fill', '#2196F3')\r\n      .attr('stroke', '#fff')\r\n      .attr('stroke-width', 2)\r\n      .style('cursor', 'pointer');\r\n\r\n    // Add token text\r\n    nodes.append('text')\r\n      .text((d: TokenPosition) => d.token.length > 6 ? d.token.substring(0, 6) + '...' : d.token)\r\n      .attr('text-anchor', 'middle')\r\n      .attr('dy', '0.3em')\r\n      .attr('fill', '#fff')\r\n      .attr('font-size', '10px')\r\n      .attr('font-weight', 'bold')\r\n      .style('pointer-events', 'none');\r\n\r\n    // Add hover effects\r\n    nodes\r\n      .on('mouseover', function(event: any, d: TokenPosition) {\r\n        d3.select(this).select('circle')\r\n          .transition()\r\n          .duration(200)\r\n          .attr('r', 25)\r\n          .attr('fill', '#21CBF3');\r\n        \r\n        // Show tooltip\r\n        d3.select('body').append('div')\r\n          .attr('class', 'spider-tooltip')\r\n          .style('position', 'absolute')\r\n          .style('background', 'rgba(0, 0, 0, 0.8)')\r\n          .style('color', '#fff')\r\n          .style('padding', '8px')\r\n          .style('border-radius', '4px')\r\n          .style('font-size', '12px')\r\n          .style('pointer-events', 'none')\r\n          .style('z-index', '1000')\r\n          .style('left', (event.pageX + 10) + 'px')\r\n          .style('top', (event.pageY - 10) + 'px')\r\n          .text(`Token: \"${d.token}\" (Position: ${d.index})`);\r\n      })\r\n      .on('mouseout', function() {\r\n        d3.select(this).select('circle')\r\n          .transition()\r\n          .duration(200)\r\n          .attr('r', 20)\r\n          .attr('fill', '#2196F3');\r\n        \r\n        d3.selectAll('.spider-tooltip').remove();\r\n      });\r\n\r\n    // Add center label\r\n    g.append('text')\r\n      .attr('x', centerX)\r\n      .attr('y', centerY - 10)\r\n      .attr('text-anchor', 'middle')\r\n      .attr('fill', '#aaa')\r\n      .attr('font-size', '14px')\r\n      .text(`Layer ${selectedLayer + 1}, Head ${selectedHead + 1}`);\r\n\r\n    g.append('text')\r\n      .attr('x', centerX)\r\n      .attr('y', centerY + 10)\r\n      .attr('text-anchor', 'middle')\r\n      .attr('fill', '#aaa')\r\n      .attr('font-size', '12px')\r\n      .text('Attention Flow Network');\r\n\r\n  }, [attention, tokens, selectedLayer, selectedHead]);\r\n\r\n  return (\r\n    <Paper \r\n      elevation={2} \r\n      sx={{ \r\n        p: 2, \r\n        mb: 3, \r\n        bgcolor: '#1e1e1e',\r\n        border: '1px solid #333'\r\n      }}\r\n    >\r\n      <Typography variant=\"h6\" sx={{ mb: 2, color: '#fff' }}>\r\n        Attention Spider Web\r\n      </Typography>\r\n      <Typography variant=\"body2\" sx={{ mb: 2, color: '#aaa' }}>\r\n        Network visualization showing attention connections between tokens. \r\n        Line thickness and opacity represent attention strength.\r\n      </Typography>\r\n      <svg\r\n        ref={svgRef}\r\n        width=\"100%\"\r\n        height=\"600\"\r\n        viewBox=\"0 0 800 600\"\r\n        style={{ background: '#0a0a0a', borderRadius: '4px' }}\r\n      />\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default AttentionSpiderWeb; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}