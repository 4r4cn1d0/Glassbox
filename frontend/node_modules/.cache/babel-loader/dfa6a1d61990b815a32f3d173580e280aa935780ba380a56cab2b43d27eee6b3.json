{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aayus\\\\Glassbox\\\\frontend\\\\src\\\\AttentionHeatmap.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { Box, Typography } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AttentionHeatmap = ({\n  attention,\n  tokens,\n  selectedLayer,\n  selectedHead\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    var _attention$selectedLa;\n    if (!attention || !tokens || !canvasRef.current) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    const cellSize = 20;\n    const padding = 100;\n    const tokenCount = tokens.length;\n    canvas.width = tokenCount * cellSize + padding * 2;\n    canvas.height = tokenCount * cellSize + padding * 2;\n\n    // Clear canvas\n    ctx.fillStyle = '#1a1a1a';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Get attention weights for selected layer and head\n    const attentionWeights = (_attention$selectedLa = attention[selectedLayer]) === null || _attention$selectedLa === void 0 ? void 0 : _attention$selectedLa[selectedHead];\n    if (!attentionWeights) return;\n\n    // Draw heatmap\n    for (let i = 0; i < tokenCount; i++) {\n      for (let j = 0; j < Math.min(tokenCount, attentionWeights.length); j++) {\n        const weight = attentionWeights[j] || 0;\n        const intensity = Math.min(weight * 2, 1); // Scale for visibility\n\n        // Color from blue (low) to red (high)\n        const r = Math.floor(intensity * 255);\n        const g = Math.floor((1 - intensity) * 100);\n        const b = Math.floor((1 - intensity) * 255);\n        ctx.fillStyle = `rgb(${r}, ${g}, ${b})`;\n        ctx.fillRect(padding + j * cellSize, padding + i * cellSize, cellSize - 1, cellSize - 1);\n      }\n    }\n\n    // Draw token labels\n    ctx.fillStyle = '#ffffff';\n    ctx.font = '12px monospace';\n    ctx.textAlign = 'center';\n\n    // X-axis labels (source tokens)\n    for (let i = 0; i < Math.min(tokens.length, 10); i++) {\n      const token = tokens[i].substring(0, 8); // Truncate long tokens\n      ctx.save();\n      ctx.translate(padding + i * cellSize + cellSize / 2, padding - 10);\n      ctx.rotate(-Math.PI / 4);\n      ctx.fillText(token, 0, 0);\n      ctx.restore();\n    }\n\n    // Y-axis labels (target tokens)\n    ctx.textAlign = 'right';\n    for (let i = 0; i < Math.min(tokens.length, 10); i++) {\n      const token = tokens[i].substring(0, 8);\n      ctx.fillText(token, padding - 10, padding + i * cellSize + cellSize / 2);\n    }\n\n    // Draw grid lines\n    ctx.strokeStyle = '#333';\n    ctx.lineWidth = 0.5;\n    for (let i = 0; i <= tokenCount; i++) {\n      // Vertical lines\n      ctx.beginPath();\n      ctx.moveTo(padding + i * cellSize, padding);\n      ctx.lineTo(padding + i * cellSize, padding + tokenCount * cellSize);\n      ctx.stroke();\n\n      // Horizontal lines\n      ctx.beginPath();\n      ctx.moveTo(padding, padding + i * cellSize);\n      ctx.lineTo(padding + tokenCount * cellSize, padding + i * cellSize);\n      ctx.stroke();\n    }\n  }, [attention, tokens, selectedLayer, selectedHead]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      p: 2,\n      bgcolor: '#2a2a2a',\n      borderRadius: 2,\n      mb: 2\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      sx: {\n        color: '#fff',\n        mb: 2\n      },\n      children: [\"Attention Heatmap - Layer \", selectedLayer + 1, \", Head \", selectedHead + 1]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        overflow: 'auto',\n        maxWidth: '100%'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        style: {\n          border: '1px solid #555',\n          backgroundColor: '#1a1a1a'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"caption\",\n      sx: {\n        color: '#aaa',\n        mt: 1,\n        display: 'block'\n      },\n      children: \"Red = High Attention, Blue = Low Attention\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n_s(AttentionHeatmap, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = AttentionHeatmap;\nexport default AttentionHeatmap;\nvar _c;\n$RefreshReg$(_c, \"AttentionHeatmap\");","map":{"version":3,"names":["React","useEffect","useRef","Box","Typography","jsxDEV","_jsxDEV","AttentionHeatmap","attention","tokens","selectedLayer","selectedHead","_s","canvasRef","_attention$selectedLa","current","canvas","ctx","getContext","cellSize","padding","tokenCount","length","width","height","fillStyle","fillRect","attentionWeights","i","j","Math","min","weight","intensity","r","floor","g","b","font","textAlign","token","substring","save","translate","rotate","PI","fillText","restore","strokeStyle","lineWidth","beginPath","moveTo","lineTo","stroke","sx","p","bgcolor","borderRadius","mb","children","variant","color","fileName","_jsxFileName","lineNumber","columnNumber","overflow","maxWidth","ref","style","border","backgroundColor","mt","display","_c","$RefreshReg$"],"sources":["C:/Users/aayus/Glassbox/frontend/src/AttentionHeatmap.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport { Box, Typography } from '@mui/material';\r\n\r\ninterface AttentionHeatmapProps {\r\n  attention: number[][][]; // [layer][head][token_positions]\r\n  tokens: string[];\r\n  selectedLayer: number;\r\n  selectedHead: number;\r\n}\r\n\r\nconst AttentionHeatmap: React.FC<AttentionHeatmapProps> = ({ \r\n  attention, \r\n  tokens, \r\n  selectedLayer, \r\n  selectedHead \r\n}) => {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (!attention || !tokens || !canvasRef.current) return;\r\n\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n\r\n    const cellSize = 20;\r\n    const padding = 100;\r\n    const tokenCount = tokens.length;\r\n\r\n    canvas.width = tokenCount * cellSize + padding * 2;\r\n    canvas.height = tokenCount * cellSize + padding * 2;\r\n\r\n    // Clear canvas\r\n    ctx.fillStyle = '#1a1a1a';\r\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n    // Get attention weights for selected layer and head\r\n    const attentionWeights = attention[selectedLayer]?.[selectedHead];\r\n    if (!attentionWeights) return;\r\n\r\n    // Draw heatmap\r\n    for (let i = 0; i < tokenCount; i++) {\r\n      for (let j = 0; j < Math.min(tokenCount, attentionWeights.length); j++) {\r\n        const weight = attentionWeights[j] || 0;\r\n        const intensity = Math.min(weight * 2, 1); // Scale for visibility\r\n        \r\n        // Color from blue (low) to red (high)\r\n        const r = Math.floor(intensity * 255);\r\n        const g = Math.floor((1 - intensity) * 100);\r\n        const b = Math.floor((1 - intensity) * 255);\r\n        \r\n        ctx.fillStyle = `rgb(${r}, ${g}, ${b})`;\r\n        ctx.fillRect(\r\n          padding + j * cellSize,\r\n          padding + i * cellSize,\r\n          cellSize - 1,\r\n          cellSize - 1\r\n        );\r\n      }\r\n    }\r\n\r\n    // Draw token labels\r\n    ctx.fillStyle = '#ffffff';\r\n    ctx.font = '12px monospace';\r\n    ctx.textAlign = 'center';\r\n\r\n    // X-axis labels (source tokens)\r\n    for (let i = 0; i < Math.min(tokens.length, 10); i++) {\r\n      const token = tokens[i].substring(0, 8); // Truncate long tokens\r\n      ctx.save();\r\n      ctx.translate(padding + i * cellSize + cellSize/2, padding - 10);\r\n      ctx.rotate(-Math.PI/4);\r\n      ctx.fillText(token, 0, 0);\r\n      ctx.restore();\r\n    }\r\n\r\n    // Y-axis labels (target tokens)\r\n    ctx.textAlign = 'right';\r\n    for (let i = 0; i < Math.min(tokens.length, 10); i++) {\r\n      const token = tokens[i].substring(0, 8);\r\n      ctx.fillText(token, padding - 10, padding + i * cellSize + cellSize/2);\r\n    }\r\n\r\n    // Draw grid lines\r\n    ctx.strokeStyle = '#333';\r\n    ctx.lineWidth = 0.5;\r\n    for (let i = 0; i <= tokenCount; i++) {\r\n      // Vertical lines\r\n      ctx.beginPath();\r\n      ctx.moveTo(padding + i * cellSize, padding);\r\n      ctx.lineTo(padding + i * cellSize, padding + tokenCount * cellSize);\r\n      ctx.stroke();\r\n      \r\n      // Horizontal lines\r\n      ctx.beginPath();\r\n      ctx.moveTo(padding, padding + i * cellSize);\r\n      ctx.lineTo(padding + tokenCount * cellSize, padding + i * cellSize);\r\n      ctx.stroke();\r\n    }\r\n\r\n  }, [attention, tokens, selectedLayer, selectedHead]);\r\n\r\n  return (\r\n    <Box sx={{ p: 2, bgcolor: '#2a2a2a', borderRadius: 2, mb: 2 }}>\r\n      <Typography variant=\"h6\" sx={{ color: '#fff', mb: 2 }}>\r\n        Attention Heatmap - Layer {selectedLayer + 1}, Head {selectedHead + 1}\r\n      </Typography>\r\n      <Box sx={{ overflow: 'auto', maxWidth: '100%' }}>\r\n        <canvas \r\n          ref={canvasRef} \r\n          style={{ \r\n            border: '1px solid #555',\r\n            backgroundColor: '#1a1a1a'\r\n          }}\r\n        />\r\n      </Box>\r\n      <Typography variant=\"caption\" sx={{ color: '#aaa', mt: 1, display: 'block' }}>\r\n        Red = High Attention, Blue = Low Attention\r\n      </Typography>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default AttentionHeatmap; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,SAASC,GAAG,EAAEC,UAAU,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAShD,MAAMC,gBAAiD,GAAGA,CAAC;EACzDC,SAAS;EACTC,MAAM;EACNC,aAAa;EACbC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAMC,SAAS,GAAGX,MAAM,CAAoB,IAAI,CAAC;EAEjDD,SAAS,CAAC,MAAM;IAAA,IAAAa,qBAAA;IACd,IAAI,CAACN,SAAS,IAAI,CAACC,MAAM,IAAI,CAACI,SAAS,CAACE,OAAO,EAAE;IAEjD,MAAMC,MAAM,GAAGH,SAAS,CAACE,OAAO;IAChC,MAAME,GAAG,GAAGD,MAAM,CAACE,UAAU,CAAC,IAAI,CAAC;IACnC,IAAI,CAACD,GAAG,EAAE;IAEV,MAAME,QAAQ,GAAG,EAAE;IACnB,MAAMC,OAAO,GAAG,GAAG;IACnB,MAAMC,UAAU,GAAGZ,MAAM,CAACa,MAAM;IAEhCN,MAAM,CAACO,KAAK,GAAGF,UAAU,GAAGF,QAAQ,GAAGC,OAAO,GAAG,CAAC;IAClDJ,MAAM,CAACQ,MAAM,GAAGH,UAAU,GAAGF,QAAQ,GAAGC,OAAO,GAAG,CAAC;;IAEnD;IACAH,GAAG,CAACQ,SAAS,GAAG,SAAS;IACzBR,GAAG,CAACS,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAEV,MAAM,CAACO,KAAK,EAAEP,MAAM,CAACQ,MAAM,CAAC;;IAE/C;IACA,MAAMG,gBAAgB,IAAAb,qBAAA,GAAGN,SAAS,CAACE,aAAa,CAAC,cAAAI,qBAAA,uBAAxBA,qBAAA,CAA2BH,YAAY,CAAC;IACjE,IAAI,CAACgB,gBAAgB,EAAE;;IAEvB;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,UAAU,EAAEO,CAAC,EAAE,EAAE;MACnC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,IAAI,CAACC,GAAG,CAACV,UAAU,EAAEM,gBAAgB,CAACL,MAAM,CAAC,EAAEO,CAAC,EAAE,EAAE;QACtE,MAAMG,MAAM,GAAGL,gBAAgB,CAACE,CAAC,CAAC,IAAI,CAAC;QACvC,MAAMI,SAAS,GAAGH,IAAI,CAACC,GAAG,CAACC,MAAM,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;;QAE3C;QACA,MAAME,CAAC,GAAGJ,IAAI,CAACK,KAAK,CAACF,SAAS,GAAG,GAAG,CAAC;QACrC,MAAMG,CAAC,GAAGN,IAAI,CAACK,KAAK,CAAC,CAAC,CAAC,GAAGF,SAAS,IAAI,GAAG,CAAC;QAC3C,MAAMI,CAAC,GAAGP,IAAI,CAACK,KAAK,CAAC,CAAC,CAAC,GAAGF,SAAS,IAAI,GAAG,CAAC;QAE3ChB,GAAG,CAACQ,SAAS,GAAG,OAAOS,CAAC,KAAKE,CAAC,KAAKC,CAAC,GAAG;QACvCpB,GAAG,CAACS,QAAQ,CACVN,OAAO,GAAGS,CAAC,GAAGV,QAAQ,EACtBC,OAAO,GAAGQ,CAAC,GAAGT,QAAQ,EACtBA,QAAQ,GAAG,CAAC,EACZA,QAAQ,GAAG,CACb,CAAC;MACH;IACF;;IAEA;IACAF,GAAG,CAACQ,SAAS,GAAG,SAAS;IACzBR,GAAG,CAACqB,IAAI,GAAG,gBAAgB;IAC3BrB,GAAG,CAACsB,SAAS,GAAG,QAAQ;;IAExB;IACA,KAAK,IAAIX,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGE,IAAI,CAACC,GAAG,CAACtB,MAAM,CAACa,MAAM,EAAE,EAAE,CAAC,EAAEM,CAAC,EAAE,EAAE;MACpD,MAAMY,KAAK,GAAG/B,MAAM,CAACmB,CAAC,CAAC,CAACa,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;MACzCxB,GAAG,CAACyB,IAAI,CAAC,CAAC;MACVzB,GAAG,CAAC0B,SAAS,CAACvB,OAAO,GAAGQ,CAAC,GAAGT,QAAQ,GAAGA,QAAQ,GAAC,CAAC,EAAEC,OAAO,GAAG,EAAE,CAAC;MAChEH,GAAG,CAAC2B,MAAM,CAAC,CAACd,IAAI,CAACe,EAAE,GAAC,CAAC,CAAC;MACtB5B,GAAG,CAAC6B,QAAQ,CAACN,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;MACzBvB,GAAG,CAAC8B,OAAO,CAAC,CAAC;IACf;;IAEA;IACA9B,GAAG,CAACsB,SAAS,GAAG,OAAO;IACvB,KAAK,IAAIX,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGE,IAAI,CAACC,GAAG,CAACtB,MAAM,CAACa,MAAM,EAAE,EAAE,CAAC,EAAEM,CAAC,EAAE,EAAE;MACpD,MAAMY,KAAK,GAAG/B,MAAM,CAACmB,CAAC,CAAC,CAACa,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;MACvCxB,GAAG,CAAC6B,QAAQ,CAACN,KAAK,EAAEpB,OAAO,GAAG,EAAE,EAAEA,OAAO,GAAGQ,CAAC,GAAGT,QAAQ,GAAGA,QAAQ,GAAC,CAAC,CAAC;IACxE;;IAEA;IACAF,GAAG,CAAC+B,WAAW,GAAG,MAAM;IACxB/B,GAAG,CAACgC,SAAS,GAAG,GAAG;IACnB,KAAK,IAAIrB,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIP,UAAU,EAAEO,CAAC,EAAE,EAAE;MACpC;MACAX,GAAG,CAACiC,SAAS,CAAC,CAAC;MACfjC,GAAG,CAACkC,MAAM,CAAC/B,OAAO,GAAGQ,CAAC,GAAGT,QAAQ,EAAEC,OAAO,CAAC;MAC3CH,GAAG,CAACmC,MAAM,CAAChC,OAAO,GAAGQ,CAAC,GAAGT,QAAQ,EAAEC,OAAO,GAAGC,UAAU,GAAGF,QAAQ,CAAC;MACnEF,GAAG,CAACoC,MAAM,CAAC,CAAC;;MAEZ;MACApC,GAAG,CAACiC,SAAS,CAAC,CAAC;MACfjC,GAAG,CAACkC,MAAM,CAAC/B,OAAO,EAAEA,OAAO,GAAGQ,CAAC,GAAGT,QAAQ,CAAC;MAC3CF,GAAG,CAACmC,MAAM,CAAChC,OAAO,GAAGC,UAAU,GAAGF,QAAQ,EAAEC,OAAO,GAAGQ,CAAC,GAAGT,QAAQ,CAAC;MACnEF,GAAG,CAACoC,MAAM,CAAC,CAAC;IACd;EAEF,CAAC,EAAE,CAAC7C,SAAS,EAAEC,MAAM,EAAEC,aAAa,EAAEC,YAAY,CAAC,CAAC;EAEpD,oBACEL,OAAA,CAACH,GAAG;IAACmD,EAAE,EAAE;MAAEC,CAAC,EAAE,CAAC;MAAEC,OAAO,EAAE,SAAS;MAAEC,YAAY,EAAE,CAAC;MAAEC,EAAE,EAAE;IAAE,CAAE;IAAAC,QAAA,gBAC5DrD,OAAA,CAACF,UAAU;MAACwD,OAAO,EAAC,IAAI;MAACN,EAAE,EAAE;QAAEO,KAAK,EAAE,MAAM;QAAEH,EAAE,EAAE;MAAE,CAAE;MAAAC,QAAA,GAAC,4BAC3B,EAACjD,aAAa,GAAG,CAAC,EAAC,SAAO,EAACC,YAAY,GAAG,CAAC;IAAA;MAAAmD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3D,CAAC,eACb3D,OAAA,CAACH,GAAG;MAACmD,EAAE,EAAE;QAAEY,QAAQ,EAAE,MAAM;QAAEC,QAAQ,EAAE;MAAO,CAAE;MAAAR,QAAA,eAC9CrD,OAAA;QACE8D,GAAG,EAAEvD,SAAU;QACfwD,KAAK,EAAE;UACLC,MAAM,EAAE,gBAAgB;UACxBC,eAAe,EAAE;QACnB;MAAE;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACN3D,OAAA,CAACF,UAAU;MAACwD,OAAO,EAAC,SAAS;MAACN,EAAE,EAAE;QAAEO,KAAK,EAAE,MAAM;QAAEW,EAAE,EAAE,CAAC;QAAEC,OAAO,EAAE;MAAQ,CAAE;MAAAd,QAAA,EAAC;IAE9E;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACV,CAAC;AAEV,CAAC;AAACrD,EAAA,CA/GIL,gBAAiD;AAAAmE,EAAA,GAAjDnE,gBAAiD;AAiHvD,eAAeA,gBAAgB;AAAC,IAAAmE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}